# ZSTD scanner
# https://github.com/facebook/zstd/blob/dev/doc/zstd_compression_format.md

get FILES asize
comtype zstd
math runtimed = 0
math filecount = 0

for I = 0 < FILES
    if runtimed == filecount
       print "runtimed"
       string namez = "file_"
       string namez + filecount
       string namez + "/"
       math filecount + 1000
    endif
    print "filecount: %filecount%"
    print "runtimed: %runtimed%"
    math runtimed + 1
    
    string name = namez
    string namesz p "%08d" i
    string name + namesz
    string name + ".dat"
    
    # Print the file name
    print "File Name: " + name
    
    findloc OFFSET binary "\x28\xb5\x2f\xfd"
    
    # Print the offset
    print "Offset: %offset%"
    
    goto OFFSET

    print "offset: %offset%"
    
    idstring "\x28\xb5\x2f\xfd"
    savepos b1
    print "offset: %b1%"
    
    getbits Dictionary_ID_flag 2
    savepos b1
    print "Dictionary ID flag: %Dictionary_ID_flag%"
    print "offset: %b1%"
    savepos b1
    print "Dictionary ID flag: %Dictionary_ID_flag%"
    print "offset: %b1%"
    
    getbits Content_Checksum_flag 1
    savepos b1
    print "Content Checksum flag: %Content_Checksum_flag%"
    print "offset: %b1%"
    
    getbits Reserved_bit 1
    print "Reserved bit : %Reserved_bit%"
    savepos b1
    print "offset: %b1%"
    
    getbits Unused_bit 1
    savepos b1
    print "Unused bit: %Unused_bit%"
    print "offset: %b1%"
    
    getbits Single_Segment_flag 1
    savepos b1
    print "Single Segment flag: %Single_Segment_flag%"
    print "offset: %b1%"
    
    getbits Frame_Content_Size_flag 2
    print "Frame Content Size flag: %Frame_Content_Size_flag%"
    savepos b1
    print "offset: %b1%"

    if Single_Segment_flag == 0
        get Window_Descriptor byte
        print "Window Descriptor: %Window_Descriptor%"
        savepos b1
        print "offset: %b1%"
    endif

    if Frame_Content_Size_flag == 0
        if Single_Segment_flag == 0     # FCS_Field_Size 0
            math Frame_Content_Size = 0
            print "Frame Content Size null: %Frame_Content_Size%"
        else                            # FCS_Field_Size 1
            get Frame_Content_Size byte
            print "Frame Content Size byte: %Frame_Content_Size%"
        endif
    elif Frame_Content_Size_flag == 1   # FCS_Field_Size 2
        get Frame_Content_Size short
        print "Frame Content Size short: %Frame_Content_Size%"
        math Frame_Content_Size + 256
        print "Frame Content Size short + 256: %Frame_Content_Size%"
    elif Frame_Content_Size_flag == 2   # FCS_Field_Size 4
        get Frame_Content_Size long
        print "Frame Content Size long: %Frame_Content_Size%"
    elif Frame_Content_Size_flag == 3   # FCS_Field_Size 8
        get Frame_Content_Size longlong
        print "Frame Content Size longlong: %Frame_Content_Size%"
    endif

    do
        getbits Last_Block 1
        print "Last Block: %Last_Block%"
        getbits Block_Type 2
        print "Block Type: %Block_Type%"
        getbits Block_Size 21
        print "Block Size: %Block_Size%"
        if Block_Type == 1  # RLE_Block
            goto 1          0 SEEK_CUR
        else
            goto Block_Size 0 SEEK_CUR
        endif
        if Content_Checksum_flag != 0
            get Content_Checksum long
            print "Content Checksum: %Content_Checksum%"
        endif
    while Last_Block == 0
    savepos SIZE
    math SIZE - OFFSET
    print "ZIP SIZE: %size%"

    clog name OFFSET SIZE Frame_Content_Size
next I